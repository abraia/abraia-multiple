#!/usr/bin/env python
from __future__ import print_function
from __future__ import division
from builtins import input

import os
import sys
import shutil
from glob import glob
from tqdm import tqdm

import click

from abraia import config
from abraia import Abraia
from abraia import APIError

abraia = Abraia(folder='batch/')


@click.group('abraia')
@click.version_option('0.6.2')
def cli():
    """Abraia CLI tool"""
    pass


@cli.command()
def configure():
    """Configure the abraia api key"""
    api_key, api_secret = config.load_auth()
    abraia_key = config.base64encode(
        '{}:{}'.format(api_key, api_secret)) if api_key and api_secret else ''
    key = input('Abraia Key [{}]: '.format(abraia_key))
    abraia_key = abraia_key if key == '' else key
    api_key, api_secret = config.base64decode(abraia_key).split(':')
    config.save_auth(api_key, api_secret)


@cli.command()
def info():
    """Show user account information"""
    click.echo('abraia, version 0.6.2')
    try:
        user = abraia.load_user()
        click.echo('Name: %s' % user.get('name'))
        click.echo('Email: %s' % user.get('email'))
        click.echo('Credits: %s' % user.get('credits'))
    except APIError as error:
        print('Error', error.code, error.message)


def input_files(src):
    src = os.path.join(src, '**/*') if os.path.isdir(src) else src
    return glob(src, recursive=True)


def process_file(path, dest, args):
    try:
        abraia.from_file(path).process(args).to_file(dest)
    except APIError as error:
        print('Error', error.code, error.message)


def process_url(path, dest, args):
    try:
        abraia.from_url(path).process(args).to_file(dest)
        print('New image saved:', dest)
    except APIError as error:
        print('Error', error.code, error.message)


def process_optimize(path, dest, args):  # path would be src
    format = args.get('format')
    filenames = input_files(path)
    dirname = path.rstrip('/').rstrip('\\') if os.path.isdir(path) else None
    if len(filenames):
        for filename in tqdm(filenames, unit='file'):
            # TODO: Add parse_output function
            path, name = os.path.split(filename)
            nam, ext = name.split('.')
            oext = format if format is not None else ext
            fileout = os.path.join(path, nam + '_o.' + oext)
            if dirname:
                relpath = os.path.relpath(path, dirname)
                if not os.path.exists(os.path.join(dirname + '_o', relpath)):
                    os.makedirs(os.path.join(dirname + '_o', relpath))
                fileout = os.path.join(
                    dirname + '_o', relpath, nam + '.' + oext)
            if dest is not None:
                fileout = dest
                root, oext = os.path.splitext(fileout)
            if ext.lower() in config.IMAGE_EXTS and oext.lower() in config.IMAGE_EXTS:
                process_file(filename, fileout, args)
                if ext == oext and os.path.getsize(fileout) > os.path.getsize(filename):
                    shutil.copy2(filename, fileout)
                sizein = os.path.getsize(filename) / 1024
                sizeout = os.path.getsize(fileout) / 1024
                tqdm.write('[{3:04.1f}%] {1:6.1f}KB -> {2:6.1f}KB ({0})'.format(
                    os.path.split(fileout)[1], sizein, sizeout, 100 * (1 - sizeout / sizein)))
            else:
                shutil.copy2(filename, fileout)
    else:
        fileout = os.path.split(path) if dest is None else dest
        process_url(path, fileout, args)


@cli.command()
@click.option('--width', help='Resize to specified width', type=int)
@click.option('--height', help='Resize to specified height', type=int)
@click.option('--format', help='Convert to specified image format', type=click.Choice(['jpeg', 'png', 'webp']))
@click.option('--action', help='Apply an action template', type=click.Path())
@click.argument('src')
@click.argument('dest', required=False)
def optimize(src, dest, width, height, format, action):
    """Optimize an image or set of images"""
    args = {'width': width, 'height': height,
            'format': format, 'action': action}
    process_optimize(src, dest, args)


@cli.command()
@click.argument('src')
def metadata(src):
    """Load file metadata"""
    path = abraia.userid + '/' + abraia.folder
    resp = abraia.upload_file(src, path)
    meta = abraia.load_metadata(resp['source'])
    click.echo(meta)


@cli.command()
@click.option('--labels', 'mode', flag_value='labels', default=True, help='Detect image labels')
@click.option('--faces', 'mode', flag_value='faces', help='Detect image faces')
@click.option('--text', 'mode', flag_value='text', help='Detect image text')
@click.argument('src')
def detect(src, mode):
    """Detect image data"""
    path = abraia.userid + '/' + abraia.folder
    resp = abraia.upload_file(src, path)
    labels = abraia.detect_labels(resp['source'])
    click.echo(labels)


@cli.command()
@click.argument('path', required=False)
def list(path):
    """List the files in abraia"""
    path = path if path else ''
    files, folders = abraia.list(path)
    txt = '\n'.join(['{:>28}  {}/'.format('', f['name'])
                     for f in folders]) + '\n'
    txt += '\n'.join(['{}  {:>7}  {}'.format(f['date'],
                                             f['size'], f['name']) for f in files])
    txt += '\ntotal {}'.format(len(files))
    click.echo(txt)


@cli.command()
@click.argument('src', type=click.Path())
# @click.argument('dest', required=False)
def upload(src):
    """Upload a file to abraia"""
    files = input_files(src)
    with click.progressbar(files) as _files:
        for file in _files:
            path = abraia.userid + '/' + abraia.folder
            resp = abraia.upload_file(file, path)
            click.echo(resp)


@cli.command()
@click.argument('path')
def download(path):
    """Download a file from abraia"""
    try:
        abraia.from_store(path).to_file(path)
    except APIError as error:
        print('Error', error.code, error.message)


@cli.command()
@click.argument('path')
@click.confirmation_option(prompt='Are you sure you want to remove the file?')
def remove(path):
    """Remove a file from abraia"""
    click.echo(abraia.from_store(path).remove())


if __name__ == '__main__':
    cli()
