#!/usr/bin/env python
import os
import sys
import glob
import argparse
from tqdm import tqdm

import abraia

FILE_PATTERNS = ['*.jpg', '*.jpeg', '*.png', '*.gif', '*.webp']


def processBatch(args):
    filenames = []
    dirname = None
    path = args['path']

    if os.path.isfile(path):
        filenames.append(path)

    if os.path.isdir(path):
        dirname = path
        [filenames.extend(glob.glob(os.path.join(
            dirname, pattern))) for pattern in FILE_PATTERNS]

    if dirname:
        if dirname.endswith('/'):
            dirname = dirname[:-1]
        dirname = dirname+'_o'
        os.makedirs(dirname, exist_ok=True)

    for filename in tqdm(filenames, unit='file'):
        path, name = os.path.split(filename)
        nam, ext = os.path.splitext(name)
        fileout = os.path.join(path, nam+'_o'+ext)
        if dirname:
            fileout = os.path.join(dirname, nam+ext)
        abraia.from_file(filename).resize(
            width=args.get('width'), height=args.get('height')).to_file(fileout)
        sizein = os.path.getsize(filename) / 1024
        sizeout = os.path.getsize(fileout) / 1024
        tqdm.write('[{3:04.1f}%] {1:6.1f}KB -> {2:6.1f}KB ({0})'.format(
            name, sizein, sizeout, 100 * (1 - sizeout / sizein)))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Abraia image optimization tool')
    parser.add_argument('-V', '--version', action='version', version='0.2.0')
    subparsers = parser.add_subparsers(dest='command')
    parser_configure = subparsers.add_parser(
        'configure', help='configure the access keys')
    parser_optimize = subparsers.add_parser(
        'optimize', help='optimize the image or directory of images')
    parser_optimize.add_argument(
        'path', nargs='?', help='image path or directory of images to process')
    parser_resize = subparsers.add_parser(
        'resize', help='resize the image or directory of images')
    parser_resize.add_argument(
        '--width', type=int, help='requested image width')
    parser_resize.add_argument(
        '--height', type=int, help='requested image height')
    parser_resize.add_argument(
        'path', nargs='?', help='image path or directory of images to process')
    args = vars(parser.parse_args())

    if args['command'] is None:
        parser.print_help()
        sys.exit()

    if args['command'] == 'configure':
        api_key, api_secret = abraia.config.load_auth()
        key = input('Abraia Api Key [{}]: '.format(api_key))
        api_key = api_key if key == '' else key
        secret = input('Abraia Api Secret [{}]: '.format(api_secret))
        api_secret = api_secret if secret == '' else secret
        abraia.config.save_auth(api_key, api_secret)

    if args['command'] == 'optimize':
        if args['path'] is None:
            parser_optimize.print_help()
            sys.exit()
        processBatch(args)

    if args['command'] == 'resize':
        if args['path'] is None:
            parser_resize.print_help()
            sys.exit()
        processBatch(args)
